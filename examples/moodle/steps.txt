Moodle Operator
---------------

Moodle is an open source e-learning platform (https://moodle.org/).

In this example we will deploy Moodle platform on Kubernetes.
We will use a Moodle Operator to create Moodle platform instances as code.
Moodle supports various plugins. Moodle Operator takes the list of plugins to be installed
as declarative input in the Moodle Custom Resource Spec. The Operator installs the plugins at appropriate
location within the Moodle installation. Check moodle1.yaml to see an example of how
plugins are specified in the Custom Resource Spec. Check update-moodle1.yaml to see
an example of how to specify installation of additional plugins on an existing Moodle instance.

Setup:
-------
- Download Minikube (v0.30.0), download Helm (v2.11.0)

Steps:
-------

1) Create Kubernetes Cluster
   - minikube start --memory 4096 (only if using minikube)

   - (Experimental) If working with Managed Kubernetes cluster (such as DigitalOcean), create a single node cluster, download the cluster
     config file and save it in your ~/.kube directory with the name 'config' (e.g.: ~/.kube/config)

2) git clone https://github.com/cloud-ark/kubeplus.git

3) cd kubeplus

4) Setup Helm Service Account
   - kubectl create -f helm.yaml

5) Setup Helm
   - helm init --service-account helm

6) Wait till Tiller Pod is running
   - kubectl get pods -n kube-system

7) Once Helm Pod is ready, deploy Kubeplus
   - kubectl apply -f deploy/

8) Wait till kubeplus is ready (3/3 Ready containers)
   - kubectl get pods

9) cd examples/moodle

10) Deploy Moodle Operator
   - helm install https://github.com/cloud-ark/operatorcharts/blob/master/moodle-operator-chart-0.3.0.tgz?raw=true

11) Wait till Moodle Operator pod is ready
   - kubectl get pods

12) Find information about Moodle Custom Kind registered by Moodle Operator
    - kubectl get --raw "/apis/platform-as-code/v1/man?kind=Moodle"
    - kubectl get --raw "/apis/platform-as-code/v1/explain?kind=Moodle" | python -m json.tool
      --> You should see OpenAPI Spec for Moodle custom kind as output
    - kubectl get --raw "/apis/platform-as-code/v1/explain?kind=Moodle.MoodleSpec"  | python -m json.tool
    - kubectl describe customresourcedefinition moodles.moodlecontroller.kubeplus

13) Deploy Moodle1 instance
    - First deploy MySQL as database for the Moodle instance
      - kubectl create -f moodle1-mysql.yaml
      - kubectl get pods (Wait will mysql pod is ready)
    - Next create Moodle instance
      - kubectl create -f moodle1.yaml
      - kubectl get pods (It will take about 5/6 minutes for Moodle Pod to become ready)
    - Once Moodle Pod is ready, login to the Moodle instance
      - Update /etc/hosts with <cluster node ip, or minikube-ip> moodle1. Example:
        - 192.168.99.100 moodle1
        - You can find minikube ip using: "minikube ip" command
        - If using Managed Kubernetes, find out the cluster node ip by refering to appropriate documentation
          from the provider.
      - Retrieve Moodle instance's admin password
	- kubectl describe moodles moodle1
        - kubectl get secret moodle1 -o jsonpath="{.data.adminPassword}" | base64 --decode
          - Secret name is available in the output of 'describe' command
      - Navigate to the URL of moodle1 instance (available in the output of 'describe' command)
        - Login using 'admin' as username and password retrieved earlier from secret
    - Check installed plugins
      - As part of creating moodle instance, we install the 'profilecohort' plugin.
        Check the custom resource specification moodle1.yaml to see this definition.
        - Once logged in to the Moodle instance, hit 'Site Administration'. This will show a message to update Moodle database
          for 'profilecohort' plugin.
        - Select that option to complete Plugin installation. You should see a 'success' message when the plugin is installed.
        - Hit the 'contine' button. This will take you to the main screen. Fill out the profile and then hit 'update profile'.
        - Then
          - Navigate to -> Administration -> Plugins -> Plugins Overview
          - You should see 'profilecohort' plugin in the 'Additional plugins' list

    - Find composition tree of Moodle1 instance
      - kubectl get --raw "/apis/platform-as-code/v1/composition?kind=Moodle&instance=moodle1" | python -m json.tool

14) Update Moodle Deployment to install new Plugin
    - We will install 'wiris' plugin on 'moodle1' Moodle instance
    - kubectl apply -f update-moodle1.yaml

    - Wait for Moodle instance to become Ready
      - kubectl describe moodle moodle1
      - Once moodle1 instance is Ready, refresh the URL in the browser

    - You will see a message to update Moodle database for 'wiris' plugin
    - Select that option to complete Plugin installation
      - Navigate to -> Administration -> Plugins -> Plugins Overview
      - You should see 'profilecohort' and 'wiris' plugins in the 'Additional plugins' list

15) Deploy Moodle2 instance
    - kubectl create -f moodle2-mysql.yaml
    - kubectl get pods (Wait will MySQL Pod is ready)
    - kubectl create -f moodle2.yaml
    - kubectl get pods (It will take about 5/6 minutes for Moodle Pod to become ready)
    - Once Moodle Pod is ready,
      - kubectl describe moodles moodle2
    - Login to Moodle Instance
      - Update /etc/hosts with <minikube-ip> moodle2. Example:
        - 192.168.99.100 moodle2
        - You can find minikube ip using: "minikube ip" command
    - Check Moodle2 instance
      - kubectl describe moodle moodle2
        - The URL of Moodle instance should be available from Status field from output of above command
        - Open the URL in the browser
          - Login using 'admin' as username and retrieve password from moodle2 secret as described
            in step 12.

16) Cleanup
    - kubectl delete -f moodle1.yaml
    - kubectl delete -f moodle1-mysql.yaml
    - kubectl delete -f moodle2.yaml
    - kubectl delete -f moodle2-mysql.yaml
    - kubectl delete -f moodle-operator.yaml


Troubleshooting
----------------

1) Get KubePlus logs
   - kubectl get pod <kubeplus-pod> -c operator-manager
   - kubectl get pod <kubeplus-pod> -c operator-deployer
   - kubectl get pod <kubeplus-pod> -c kube-discovery-apiserver

2) Check Helm Deployments
   - helm list
