#!/bin/bash

source utils.sh

print_help () {
    echo "NAME"
    echo "        kubectl retrieve kubeconfig consumer"
    echo ""
    echo "SYNOPSIS"
    echo "        kubectl retrieve kubeconfig consumer <Namespace in which KubePlus is deployed> [-s <api server url>] [-k <kubeconfig path>]"
    echo ""
    echo "DESCRIPTION"
    echo "        This command is used to retrieve consumer kubeconfig file."
    echo "        -s <api server url> is an optional argument to pass the URL of the API server. "
    echo "        This URL will be embedded in the generated kubeconfig for the server endpoint." 
    echo "        -k is an optional argument to pass the kubeconfig that needs to be used to access the cluster."
    exit 0
}

if (( $# < 1 )); then
	print_help
    exit 0
fi

kubeplusNS=$1
kubeconfig="$HOME/.kube/config" #default value
serverURL='-1'

shift;

#echo $@
while getopts ":k:s:" opt; do
  case ${opt} in
    k )
	  #echo "A:${OPTARG}"
      kubeconfig=${OPTARG}
      if [ ! -f $kubeconfig ]; then
        echo "Kubeconfig $kubeconfig does not exist."
        exit 0
      fi
      ;;
    s )
      #echo "B:${OPTARG}"
	  serverURL=${OPTARG}
	  ;;
  esac
done

python /$KUBEPLUS_HOME/plugins/providerkubeconfigretriever.py $kubeplusNS $serverURL "consumer" $kubeconfig


# if (( $# < 1 )); then
#     echo "kubectl retrieve kubeconfig consumer <Namespace in which KubePlus is deployed> [--server=<api server url>]"
#     echo " --server=<api server url> is an optional argument to pass the URL of the API server. Generated kubeconfig"
#     echo " will embed this URL instead of the IP based URL that is generated by KubePlus."
#     exit 0
# #    echo "kubectl retrieve kubeconfig consumer <Namespace in which KubePlus is deployed>" #<resourceplural> <providerKubeconfig>"
# #    exit 0
# fi

# kubeplusNS=$1
# serverURL='-1'
# kubeconfig=~/.kube/config
# if (( $# == 2 )); then
# 	serverURL=$2
# 	#echo "Server URL:$serverURL"
# fi

# if (( $# == 3 )); then
# 	serverURL=$2
# 	#echo "Server URL:$serverURL"
# 	kubeconfig=$3
# fi


# #kubectl get configmaps kubeplus-saas-consumer-kubeconfig -n $kubeplusNS -o jsonpath="{.data.kubeplus-saas-consumer\.json}"

# python /$KUBEPLUS_HOME/plugins/providerkubeconfigretriever.py $kubeplusNS $serverURL "consumer" $kubeconfig
