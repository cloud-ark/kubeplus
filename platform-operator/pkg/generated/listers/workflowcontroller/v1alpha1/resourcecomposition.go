/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cloud-ark/kubeplus/platform-operator/pkg/apis/workflowcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceCompositionLister helps list ResourceCompositions.
// All objects returned here must be treated as read-only.
type ResourceCompositionLister interface {
	// List lists all ResourceCompositions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceComposition, err error)
	// ResourceCompositions returns an object that can list and get ResourceCompositions.
	ResourceCompositions(namespace string) ResourceCompositionNamespaceLister
	ResourceCompositionListerExpansion
}

// resourceCompositionLister implements the ResourceCompositionLister interface.
type resourceCompositionLister struct {
	indexer cache.Indexer
}

// NewResourceCompositionLister returns a new ResourceCompositionLister.
func NewResourceCompositionLister(indexer cache.Indexer) ResourceCompositionLister {
	return &resourceCompositionLister{indexer: indexer}
}

// List lists all ResourceCompositions in the indexer.
func (s *resourceCompositionLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceComposition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceComposition))
	})
	return ret, err
}

// ResourceCompositions returns an object that can list and get ResourceCompositions.
func (s *resourceCompositionLister) ResourceCompositions(namespace string) ResourceCompositionNamespaceLister {
	return resourceCompositionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceCompositionNamespaceLister helps list and get ResourceCompositions.
// All objects returned here must be treated as read-only.
type ResourceCompositionNamespaceLister interface {
	// List lists all ResourceCompositions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceComposition, err error)
	// Get retrieves the ResourceComposition from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResourceComposition, error)
	ResourceCompositionNamespaceListerExpansion
}

// resourceCompositionNamespaceLister implements the ResourceCompositionNamespaceLister
// interface.
type resourceCompositionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceCompositions in the indexer for a given namespace.
func (s resourceCompositionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceComposition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceComposition))
	})
	return ret, err
}

// Get retrieves the ResourceComposition from the indexer for a given namespace and name.
func (s resourceCompositionNamespaceLister) Get(name string) (*v1alpha1.ResourceComposition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resourcecomposition"), name)
	}
	return obj.(*v1alpha1.ResourceComposition), nil
}
