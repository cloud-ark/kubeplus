/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cloud-ark/kubeplus/platform-operator/pkg/apis/workflowcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceEventLister helps list ResourceEvents.
// All objects returned here must be treated as read-only.
type ResourceEventLister interface {
	// List lists all ResourceEvents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceEvent, err error)
	// ResourceEvents returns an object that can list and get ResourceEvents.
	ResourceEvents(namespace string) ResourceEventNamespaceLister
	ResourceEventListerExpansion
}

// resourceEventLister implements the ResourceEventLister interface.
type resourceEventLister struct {
	indexer cache.Indexer
}

// NewResourceEventLister returns a new ResourceEventLister.
func NewResourceEventLister(indexer cache.Indexer) ResourceEventLister {
	return &resourceEventLister{indexer: indexer}
}

// List lists all ResourceEvents in the indexer.
func (s *resourceEventLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceEvent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceEvent))
	})
	return ret, err
}

// ResourceEvents returns an object that can list and get ResourceEvents.
func (s *resourceEventLister) ResourceEvents(namespace string) ResourceEventNamespaceLister {
	return resourceEventNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceEventNamespaceLister helps list and get ResourceEvents.
// All objects returned here must be treated as read-only.
type ResourceEventNamespaceLister interface {
	// List lists all ResourceEvents in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceEvent, err error)
	// Get retrieves the ResourceEvent from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResourceEvent, error)
	ResourceEventNamespaceListerExpansion
}

// resourceEventNamespaceLister implements the ResourceEventNamespaceLister
// interface.
type resourceEventNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceEvents in the indexer for a given namespace.
func (s resourceEventNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceEvent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceEvent))
	})
	return ret, err
}

// Get retrieves the ResourceEvent from the indexer for a given namespace and name.
func (s resourceEventNamespaceLister) Get(name string) (*v1alpha1.ResourceEvent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resourceevent"), name)
	}
	return obj.(*v1alpha1.ResourceEvent), nil
}
