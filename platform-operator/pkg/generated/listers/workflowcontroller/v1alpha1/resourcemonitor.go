/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cloud-ark/kubeplus/platform-operator/pkg/apis/workflowcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceMonitorLister helps list ResourceMonitors.
// All objects returned here must be treated as read-only.
type ResourceMonitorLister interface {
	// List lists all ResourceMonitors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceMonitor, err error)
	// ResourceMonitors returns an object that can list and get ResourceMonitors.
	ResourceMonitors(namespace string) ResourceMonitorNamespaceLister
	ResourceMonitorListerExpansion
}

// resourceMonitorLister implements the ResourceMonitorLister interface.
type resourceMonitorLister struct {
	indexer cache.Indexer
}

// NewResourceMonitorLister returns a new ResourceMonitorLister.
func NewResourceMonitorLister(indexer cache.Indexer) ResourceMonitorLister {
	return &resourceMonitorLister{indexer: indexer}
}

// List lists all ResourceMonitors in the indexer.
func (s *resourceMonitorLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceMonitor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceMonitor))
	})
	return ret, err
}

// ResourceMonitors returns an object that can list and get ResourceMonitors.
func (s *resourceMonitorLister) ResourceMonitors(namespace string) ResourceMonitorNamespaceLister {
	return resourceMonitorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceMonitorNamespaceLister helps list and get ResourceMonitors.
// All objects returned here must be treated as read-only.
type ResourceMonitorNamespaceLister interface {
	// List lists all ResourceMonitors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceMonitor, err error)
	// Get retrieves the ResourceMonitor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResourceMonitor, error)
	ResourceMonitorNamespaceListerExpansion
}

// resourceMonitorNamespaceLister implements the ResourceMonitorNamespaceLister
// interface.
type resourceMonitorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceMonitors in the indexer for a given namespace.
func (s resourceMonitorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceMonitor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceMonitor))
	})
	return ret, err
}

// Get retrieves the ResourceMonitor from the indexer for a given namespace and name.
func (s resourceMonitorNamespaceLister) Get(name string) (*v1alpha1.ResourceMonitor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resourcemonitor"), name)
	}
	return obj.(*v1alpha1.ResourceMonitor), nil
}
